#ifndef FLUID_H_
#define FLUID_H_
#include <ngl/Vec3.h>
#include <vector>
#include <random>
#include <ngl/MultiBufferVAO.h>
#include <memory>

class Fluid
{
    public:
        //----------------------------------------------------------------------------------------------------------------------
        /// @brief default constructor
        //----------------------------------------------------------------------------------------------------------------------
        Fluid()=default;

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief default copy constructor
        //----------------------------------------------------------------------------------------------------------------------
        Fluid(const Fluid &)=default;

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief initialise the simulation settings
        /// @param _sizeX, width of the simulation frame
        /// @param _sizeY, height of the simulation frame
        /// @param _gridsize the size of each grid cell
        /// @param _timestep the timestep of the simulation
        /// @param _force the external force
        /// @param _right the right side of the initial fluid position
        /// @param _left the left side of the initial fluid position
        /// @param _top the top side of the initial fluid position
        /// @param _bottom the bottom side of the initial fluid position
        /// @param _type the type of the simulation solver (0 for FLIP and 1 for PIC)
        //----------------------------------------------------------------------------------------------------------------------
        void initialise(size_t _sizeX, size_t _sizeY, float _gridsize, float _timestep, const ngl::Vec3 &_force, size_t _right, size_t _left, size_t _top, size_t _bottom, bool _type);

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief simulate one step
        //----------------------------------------------------------------------------------------------------------------------
        void simulate();
        //----------------------------------------------------------------------------------------------------------------------
        /// @brief render the current simulation state
        /// @param _w the viewport width
        /// @param _h the viewport height
        /// @param _flu the flag to visualise fluid particles
        /// @param _vel the flag to visualise velocity vectors
        /// @param _pre the flag to visualise pressures
        //----------------------------------------------------------------------------------------------------------------------
        void render(size_t _w, size_t _h, bool _flu, bool _vel, bool _pre);

    private:
        //----------------------------------------------------------------------------------------------------------------------
        /// @brief a vector to store particle positions
        //----------------------------------------------------------------------------------------------------------------------
        std::vector<ngl::Vec3> m_position;

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief a vector to store particle velocities
        //----------------------------------------------------------------------------------------------------------------------
        std::vector<ngl::Vec3> m_velocity;

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief the size of the simulation frame
        //----------------------------------------------------------------------------------------------------------------------
        size_t m_sizeX;
        size_t m_sizeY;

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief the resolution of the simulation
        //----------------------------------------------------------------------------------------------------------------------
        size_t m_resolutionX;
        size_t m_resolutionY;

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief the resolution of a cell
        //----------------------------------------------------------------------------------------------------------------------
        size_t m_cell_res;

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief the number of particles
        //----------------------------------------------------------------------------------------------------------------------
        size_t m_numParticles;

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief the timestep
        //----------------------------------------------------------------------------------------------------------------------
        float m_timestep;

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief the external force
        //----------------------------------------------------------------------------------------------------------------------
        ngl::Vec3 m_force;

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief the type of the simulation solver (0 for FLIP and 1 for PIC)
        //----------------------------------------------------------------------------------------------------------------------
        bool m_type;

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief vectors for velocity fields
        //----------------------------------------------------------------------------------------------------------------------
        std::vector<float> m_velocityX;
        std::vector<float> m_velocityY;

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief vectors to store the velocity fields at previous timestep
        //----------------------------------------------------------------------------------------------------------------------
        std::vector<float> m_velocityX_old;
        std::vector<float> m_velocityY_old;

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief vectors to store the difference between the previous and current velocity fields
        //----------------------------------------------------------------------------------------------------------------------
        std::vector<float> m_velocityX_diff;
        std::vector<float> m_velocityY_diff;

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief vector for boundary field. 0 for air, 1 for fluid, -1 for solid.
        //----------------------------------------------------------------------------------------------------------------------
        std::vector<int> m_boundary;

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief vector for pressure field
        //----------------------------------------------------------------------------------------------------------------------
        std::vector<float> m_pressure;

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief vector to store the position and pressure values to visualise pressure field.
        //----------------------------------------------------------------------------------------------------------------------
        std::vector<ngl::Vec3> m_pressureViz;

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief vector to store the position of solid cells to visualise solid cells.
        //----------------------------------------------------------------------------------------------------------------------
        std::vector<ngl::Vec3> m_solid;

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief Mersenne Twister pseudo-random generator of 32-bit numbers with a state size of 19937 bits
        //----------------------------------------------------------------------------------------------------------------------
        static std::mt19937 m_generator;

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief multi buffer VAO to store data for the simulation
        //----------------------------------------------------------------------------------------------------------------------
        std::unique_ptr<ngl::MultiBufferVAO> m_vao;

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief a function to size_terpolate particle velocities to velocity fields on the grid
        //----------------------------------------------------------------------------------------------------------------------
        void particleToGrid();

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief a funciton to calculate hat function
        /// @param _r distance between the particle and the velocity posize_t on the grid in x or y axis
        //----------------------------------------------------------------------------------------------------------------------
        float hat(float _r);

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief a function to calculate the weight for size_terpolation
        /// @param _x, _y distance between the particle and the velocity posize_ts on the grid in x and y axis
        //----------------------------------------------------------------------------------------------------------------------
        float weight(float _x, float _y);

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief a function to add external forces to the velocity fields
        //----------------------------------------------------------------------------------------------------------------------
        void addForce();

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief a funciton to calculate pressure field and update velocity fields
        //----------------------------------------------------------------------------------------------------------------------
        void project();

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief a function to update the positions of the particles
        //----------------------------------------------------------------------------------------------------------------------
        void advect();

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief a function to calculate the changes in velocities on the grid 
        //----------------------------------------------------------------------------------------------------------------------
        void calculateDifferences();

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief a function to interpolate the velocities from velocity fields to particles
        //----------------------------------------------------------------------------------------------------------------------
        void gridToParticle();

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief a function to interpolate the velocity from the X velocity field to a particle
        /// @param _p particle position
        //----------------------------------------------------------------------------------------------------------------------
        float gridToParticleX(const ngl::Vec3 &_p);

        //----------------------------------------------------------------------------------------------------------------------
        /// @brief a function to interpolate the velocity from the Y velocity field to a particle
        /// @param _p particle position
        //----------------------------------------------------------------------------------------------------------------------
        float gridToParticleY(const ngl::Vec3 &_p);
};

#endif
